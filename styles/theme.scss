@import "./constants.scss";

// Bootstrap settings and general variables:
$enable-rounded: true;
$enable-reduced-motion: false;
$enable-negative-margins: true;
$variable-prefix: "";
$border-width: 0;
$input-border-width: 1px;
$input-btn-focus-width: 0;
$btn-focus-width: 0;
$input-focus-width: 0;
$input-btn-focus-box-shadow: none;
$btn-focus-box-shadow: none;
$input-focus-box-shadow: none;
$btn-border-radius:		$border-radius;
$btn-border-radius-sm:	$border-radius-sm;
$btn-border-radius-lg:	$border-radius-lg;
$btn-padding-y: 0.3rem;
$btn-padding-x: 0.9rem;
$input-padding-y: 0.3rem;
$input-padding-x: 0.7rem;
$btn-transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, opacity 0.15s ease-in-out, filter 0.15s ease-in-out;

@import "../vendor/bootstrap5/bootstrap.scss";

:root {
	// Exposing the newly added SCSS varables as CSS variables:
	--brown: #{$brown};
}

html,
.dark-theme,
html.dark-theme .light-theme {
	// Utility:
	// Adding variables for the switching between light/dark shades in light-/dark-mode:
	--shade: --dark;
	--shade-rgb: var(--light-rgb, $light);
	--shade-100: var(--gray-100, $gray-100);
	--shade-200: var(--gray-200, $gray-200);
	--shade-300: var(--gray-300, $gray-300);
	--shade-400: var(--gray-400, $gray-400);
	--shade-500: var(--gray-500, $gray-500);
	--shade-600: var(--gray-600, $gray-600);
	--shade-700: var(--gray-700, $gray-700);
	--shade-800: var(--gray-800, $gray-800);
	--shade-900: var(--gray-900, $gray-900);
	.bg {
		background: $white;
	}
	.color {
		color: $black;
	}
	.bg-shade {
		--bg-opacity: 1;
		background-color: rgba(var(--shade-rgb), var(--bg-opacity)) !important;
	}
	@for $i from 1 through 9 {
		.bg-shade-#{$i*100} {
			background-color: var(--shade-#{$i*100}) !important;
		}
	}

	// Buttons:
	.btn-primary,
	.btn-secondary,
	.btn-danger,
	.btn-warning,
	.btn-success,
	.btn-info,
	.btn-dark {
		&,
		&:hover,
		&:active,
		&:focus,
		&:disabled,
		&.disabled {
			color: white;
			text-shadow: 0 1px 2px rgb(0 0 0 / 12%);
		}
		&:hover,
		&:focus {
			filter: brightness(0.9);
		}
		&:active {
			filter: brightness(0.8);
			transition: none;
		}
	}
	.btn-danger,
	.btn-warning,
	.btn-success,
	.btn-info {
		&,
		&:hover,
		&:active,
		&:focus,
		&:disabled,
		&.disabled {
			text-shadow: 0 1px 2px rgb(0 0 0 / 12%), 0 0 8px rgb(0 0 0 / 24%);
		}
	}
	.btn-primary {
		background: linear-gradient(45deg, #0170FE, #0088FF);
	}
	.btn-secondary {
		background: linear-gradient(45deg, #444444, #535353);
	}
	.btn-danger {
		background: linear-gradient(45deg, #E84C3D, #FF4E3F);
	}
	.btn-warning {
		//background: linear-gradient(45deg, #F5AF41, #F1C40F);
		background: linear-gradient(45deg, darken(#F5AF41, 3%), darken(#F1C40F, 3%));
	}
	.btn-success {
		background: linear-gradient(45deg, #00BA47, #00D65D);
	}
	.btn-info {
		background: linear-gradient(45deg, #C49863, #D6AA75);
	}
	@each $color, $value in $theme-colors {
		.btn-outline-#{$color} {
			border-width: 1px;
			color: darken($value, 5%);
			&:hover,
			&:focus {
				color: darken($value, 10%);
				background-color: rgba($value, 0.1);
				border-color: darken($value, 10%);
			}
			&:active {
				color: darken($value, 15%);
				background-color: rgba($value, 0.2);
				border-color: darken($value, 15%);
				transition: none;
			}
		}
	}
	.btn-outline-secondary {
		border-color: $gray-500;
		&:hover,
		&:focus {
			border-color: darken($gray-500, 10%);
		}
		&:active {
			border-color: darken($gray-500, 15%);
		}
	}
	.btn:disabled,
	.btn.disabled,
	fieldset:disabled .btn {
		opacity: 0.65;
		filter: grayscale(0.25);
	}
	.btn-icon {
		display: flex;
		padding: 0;
		height: calc(1.5em + 2 * $input-padding-y );
		width: calc(1.5em + 2 * $input-padding-y );
		align-items: center;
		justify-content: center;
	}
	.btn-row > .btn + .btn {
		margin-left: 0.5rem;
	}

	// Forms:
	.form-control {
		background-color: transparent;
	}
}

// Dark mode:
.dark-theme {
	@import "./dark-mode.scss";
}
